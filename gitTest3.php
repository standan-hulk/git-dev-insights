<?php

use Github\AuthMethod;
use Github\Client;

require 'vendor/autoload.php';

// This file is generated by Composer
require_once __DIR__ . '/vendor/autoload.php';

$token = '';

// Gewünschter Zeitpunkt (zum Beispiel '2023-01-01T00:00:00Z')
$timestamp = '2023-08-28T00:00:00Z';

$username = 'standan-hulk';
$repository = 'star-confederation';

$referenceBranch = 'heads/master';

$repositoryRootPath = ''; // Der Root-Pfad, ab dem Sie starten möchten

$client = new Client();
$client->authenticate($token, null, AuthMethod::ACCESS_TOKEN);

$repositoryInfo = $client->api('repo')->show('standan-hulk', $repository);

$languages = $client->api('repo')->languages('standan-hulk', $repository);
dump($languages);

$commits = $client->api('repo')->commits()->all($username, $repository, ['sha' => 'master']);

// Iterieren Sie durch die Commits, um den Commit-SHA des letzten Commits vor dem gewünschten Datum zu finden
$lastCommitSHA = null;
foreach ($commits as $commit) {
    if ($commit['commit']['committer']['date'] <= $timestamp) {
        // Dieser Commit liegt vor dem gewünschten Datum
        $lastCommitSHA = $commit['sha'];
        break;
    }
}

// Funktion zur rekursiven Verarbeitung des Repository-Inhalts
function processContents($client, $username, $repository, $path, $commitSHA, &$codeDistribution)
{
    // API-Anfrage, um den Inhalt eines Verzeichnisses zu einem bestimmten Commit abzurufen
    $contents = $client->api('repo')->contents()->show($username, $repository, $path, $commitSHA);

    foreach ($contents as $item) {
        if ($item['type'] == 'file') {
            $filePath = $item['path'];

            dump($filePath);

            $supportedFiles = ['php', 'css', 'html', 'js', 'ts']; // TODO: phtml?

            $fileExtension = pathinfo($filePath, PATHINFO_EXTENSION);

            if (in_array($fileExtension, $supportedFiles)) {
                $fileContent = $client->api('repo')->contents()->download($username, $repository, $filePath, $commitSHA);

                $lines = preg_split('/\R/', $fileContent);
dump($lines);
                $codeDistribution[$fileExtension] += count($lines);
            }

        } elseif ($item['type'] == 'dir') {
            processContents($client, $username, $repository, $item['path'], $commitSHA, $codeDistribution);
        }
    }
}

// Array zur Speicherung der Code-Verteilung
$codeDistribution = [
    'php' => 0,
    'css' => 0,
    'html' => 0,
    'js' => 0,
    'ts' => 0,
];

// Rufen Sie die Verarbeitungsfunktion auf dem Repository-Inhalt auf
processContents($client, $username, $repository, $repositoryRootPath, $lastCommitSHA, $codeDistribution);

// Ausgabe der Code-Verteilung
print_r($codeDistribution);

